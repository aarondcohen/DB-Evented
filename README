NAME
    DB::Evented - A pragmatic DBI like evented module.

VERSION
    Version 0.03

SYNOPSIS
    Doing selects in synchronise order is not always the most efficient way
    to interact with the Database.

      use DB::Evented;

      my $evented = DB::Evented->new("DBI:SQLite2:dbname=$dname", "","");

      my $results;
      $evented->selectcol_arrayref(
        q{
          select
            test1,
            test2
          from
            test
        },
        { 
          Columns => [1,2],
          response => sub {
              $results->{result1} = shift;
          }         
        }
      );
  
      $evented->selectrow_hashref(
        q{
          select
            test1,
            test2
          from
            test
        },
        {
          response => sub {
            $results->{result2} = shift;
          }
        }
      );

      $evented->execute_in_parallel;

STATIC METHODS
  new ($connection_str, $username, $pass, %other_anyevent_dbi_params )
    In order to initialize a DB::Evented object a connection_str is most
    likely required. See AnyEvent::DBI for more information.

INSTANCE METHODS
  any_event_handler
    This will return an AnyEvent::DBI handler. The key difference between
    this handler and DBI is that it's using AnyEvent under the hood. What
    does this mean? It means that if you use an AnyEvent::DBI method it will
    run asynchronously.

  clear_handlers
    Clears all handlers

  clear_queue
    Clears the queue of any db todos

  execute_in_parallel
    Will execute all of the queued statements in parallel. This will create
    a pool of handlers and cache them if necessary.

  selectall_arrayref ($sql, \%attr, @binds )
    This method functions in the same way as DBI::selectall_arrayref. The
    key difference being it delays the execution until execute_in_parallel
    has been called. The results can be accessed in the response attribute
    call back

  selectall_hashref ($sql, $key_field, \%attr, @binds )
    This method functions in the same way as DBI::selectall_hashref. The key
    difference being it delays the execution until execute_in_parallel has
    been called. The results can be accessed in the response attribute call
    back

  selectrow_arrayref ($sql, \%attr, @binds )
    This method functions in the same way as DBI::selectrow_arrayref. The
    key difference being it delays the execution until execute_in_parallel
    has been called. The results can be accessed in the response attribute
    call back

  selectrow_hashref ($sql, \%attr, @binds )
    This method functions in the same way as DBI::selectrow_hashref. The key
    difference being it delays the execution until execute_in_parallel has
    been called. The results can be accessed in the response attribute call
    back

AUTHOR
    Logan Bell, "<logie at cpan.org>"

BUGS
    Please report any bugs or feature requests to
    "bug-shutterstock-db-evented at rt.cpan.org", or through the web
    interface at
    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=DB-Evented>. I will be
    notified, and then you'll automatically be notified of progress on your
    bug as I make changes.

SUPPORT
    You can find documentation for this module with the perldoc command.

        perldoc DB::Evented

    You can also look for information at:

    * RT: CPAN's request tracker (report bugs here)
        <http://rt.cpan.org/NoAuth/Bugs.html?Dist=DB-Evented>

    * AnnoCPAN: Annotated CPAN documentation
        <http://annocpan.org/dist/DB-Evented>

    * CPAN Ratings
        <http://cpanratings.perl.org/d/DB-Evented>

    * Search CPAN
        <http://search.cpan.org/dist/DB-Evented/>

ACKNOWLEDGEMENTS
    Mom, Aaron Cohen, and Belden Lyman and thanks to Shutterstock for
    allowing me to create this module.

LICENSE AND COPYRIGHT
    Copyright 2013 Logan Bell.

    This program is free software; you can redistribute it and/or modify it
    under the terms of the the Artistic License (2.0). You may obtain a copy
    of the full license at:

    <http://www.perlfoundation.org/artistic_license_2_0>

    Any use, modification, and distribution of the Standard or Modified
    Versions is governed by this Artistic License. By using, modifying or
    distributing the Package, you accept this license. Do not use, modify,
    or distribute the Package, if you do not accept this license.

    If your Modified Version has been derived from a Modified Version made
    by someone other than you, you are nevertheless required to ensure that
    your Modified Version complies with the requirements of this license.

    This license does not grant you the right to use any trademark, service
    mark, tradename, or logo of the Copyright Holder.

    This license includes the non-exclusive, worldwide, free-of-charge
    patent license to make, have made, use, offer to sell, sell, import and
    otherwise transfer the Package with respect to any patent claims
    licensable by the Copyright Holder that are necessarily infringed by the
    Package. If you institute patent litigation (including a cross-claim or
    counterclaim) against any party alleging that the Package constitutes
    direct or contributory patent infringement, then this Artistic License
    to you shall terminate on the date that such litigation is filed.

    Disclaimer of Warranty: THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
    AND CONTRIBUTORS "AS IS' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
    THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY
    YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
    CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
    CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
    EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

